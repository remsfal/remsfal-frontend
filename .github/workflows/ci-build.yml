name: "CI Build"

on:
  push:
    branches: ["main"]
    paths-ignore:
      - '**.md'
      - '.gitignore'
  pull_request:
    paths-ignore:
      - '**.md'
      - '.gitignore'
  pull_request_target:
    branches: ["main"]

jobs:
  sonarqube:
    name: sonarQube
    runs-on: windows-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure the full history is checked out for accurate analysis

      - name: Set up Java (required for SonarCloud)
        uses: actions/setup-java@v3
        with:
          java-version: '11'

      - name: Install Node.js (if your project uses Node.js)
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Cache SonarCloud dependencies
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ hashFiles('**/sonar-project.properties') }}
          restore-keys: |
            ${{ runner.os }}-sonar-

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  lts-build:
    name: "Node.js 20 LTS Build"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: List the state of node modules
        if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        continue-on-error: true
        run: npm list
      - name: Install dependencies
        run: npm ci
        # The `npm ci` command can only install with an existing package-lock.json
      - name: Run Unit Test with Vitest (test)
        run: npm run test:unit
      - name: Build with Vite (build)
        run: npm run build
      - name: Run E2E Test with Cypress (test)
        uses: cypress-io/github-action@v6
        with:
          # we have already installed all dependencies above
          install: false
          # start the server and wait for it
          start: npm run preview
          wait-on: 'http://localhost:4173/index.html'
          # wait for 3 minutes for the server to respond
          wait-on-timeout: 180
      - name: Check style with ESLint (lint)
        run: npm run lint
      - name: Check css with Stylelint (stylelint)
        run: npm run stylelint
      - name: Save PR number to file for subsequently Sonar Analysis
        if: github.event_name == 'pull_request'
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: echo $PR_NUMBER > PR_NUMBER.txt
      - name: Archive PR number for subsequently Sonar Analysis
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: PR_NUMBER
          path: PR_NUMBER.txt
  latest-build:
    name: "Node.js 21 Latest Build"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js 21
        uses: actions/setup-node@v4
        with:
          node-version: '21.x'
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: List the state of node modules
        if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        continue-on-error: true
        run: npm list
      - name: Install dependencies
        run: npm ci
        # The `npm ci` command can only install with an existing package-lock.json
      - name: Run Unit Test with Vitest (test)
        run: npm run test:unit
      - name: Build with Vite (build)
        run: npm run build
      - name: Run E2E Test with Cypress (test)
        uses: cypress-io/github-action@v6
        with:
          # we have already installed all dependencies above
          install: false
          # start the server and wait for it
          start: npm run preview
          wait-on: 'http://localhost:4173'
          # wait for 3 minutes for the server to respond
          wait-on-timeout: 180
      - name: Check style with ESLint (lint)
        run: npm run lint
      - name: Check css with Stylelint (stylelint)
        run: npm run stylelint
  check-branches:
    name: "Check Pull Request Conditions"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check PR branches
        run: |
          if [ "${{ github.head_ref }}" == "main" ] && [ "${{ github.base_ref }}" == "main" ]; then
            echo "Pull Requests to main branch are only allowed from developer branches that are not named <main>."
            exit 1
          fi
