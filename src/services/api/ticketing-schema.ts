/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/ticketing/v1/issues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve information for all issues. */
        get: {
            parameters: {
                query: {
                    /** @description Maximum number of projects to return */
                    limit: number;
                    /** @description Offset of the first project to return */
                    offset: number;
                    /** @description Filter to return only issues of a specific user */
                    owner?: components["schemas"]["UUID"];
                    /** @description Filter to return only issues of a specific project */
                    projectId?: components["schemas"]["UUID"];
                    /** @description Filter to return only issuesfor a specific rental */
                    rentalId?: components["schemas"]["UUID"];
                    /** @description Filter to return only issuesfor a specific rental type */
                    rentalType?: components["schemas"]["UnitType"];
                    /** @description Filter to return only issues with a specific status */
                    status?: components["schemas"]["Status"];
                    /** @description Filter to return only issuesfor a specific tenancy */
                    tenancyId?: components["schemas"]["UUID"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No user authentication provided via session cookie */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Allowed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Create a new issue. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["IssueJson"];
                };
            };
            responses: {
                /** @description Issue created successfully */
                201: {
                    headers: {
                        /** @description URL of the new issue */
                        Location?: unknown;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description No user authentication provided via session cookie */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Allowed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticketing/v1/issues/{issueId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve information of an issue. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the issue */
                    issueId: components["schemas"]["UUID"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No user authentication provided via session cookie */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Allowed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The property does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an existing issue. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the issue */
                    issueId: components["schemas"]["UUID"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The issue was deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description No user authentication provided via session cookie */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Allowed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update information of an issue. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the issue */
                    issueId: components["schemas"]["UUID"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["IssueJson"];
                };
            };
            responses: {
                /** @description No user authentication provided via session cookie */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Allowed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The issue does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/ticketing/v1/issues/{issueId}/chats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all chat sessions for an issue */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task */
                    issueId: components["schemas"]["UUID"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Chat sessions retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description No user authentication provided via session cookie */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Allowed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Project or task not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Create a new chat session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task */
                    issueId: components["schemas"]["UUID"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Chat session created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description No user authentication provided via session cookie */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Allowed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Project or task not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticketing/v1/issues/{issueId}/chats/{sessionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get chat session details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task */
                    issueId: components["schemas"]["UUID"];
                    /** @description ID of the chat session */
                    sessionId: components["schemas"]["UUID"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Chat session details retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description No user authentication provided via session cookie */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Allowed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Project, task, or chat session not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete chat session */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task */
                    issueId: components["schemas"]["UUID"];
                    /** @description ID of the chat session */
                    sessionId: components["schemas"]["UUID"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Chat session deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description No user authentication provided via session cookie */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Allowed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Project, task, or chat session not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticketing/v1/issues/{issueId}/chats/{sessionId}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get chat logs in a chat session */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task */
                    issueId: components["schemas"]["UUID"];
                    /** @description ID of the chat session */
                    sessionId: components["schemas"]["UUID"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Chat messages retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description No user authentication provided via session cookie */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Allowed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Project, task, or chat session not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Send a chat message in a chat session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task */
                    issueId: components["schemas"]["UUID"];
                    /** @description ID of the chat session */
                    sessionId: components["schemas"]["UUID"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ChatMessageJson"];
                };
            };
            responses: {
                /** @description Chat message sent */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description No user authentication provided via session cookie */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Chat session is closed or archived */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Project, task, or chat session not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticketing/v1/issues/{issueId}/chats/{sessionId}/messages/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send a file in a chat session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task */
                    issueId: components["schemas"]["UUID"];
                    /** @description ID of the chat session */
                    sessionId: components["schemas"]["UUID"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": Record<string, never>;
                };
            };
            responses: {
                /** @description File sent */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description No user authentication provided via session cookie */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Chat session is closed or archived */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Project, task, or chat session not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticketing/v1/issues/{issueId}/chats/{sessionId}/messages/{messageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a chat message in a chat session */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task */
                    issueId: components["schemas"]["UUID"];
                    /** @description The chat message ID */
                    messageId: components["schemas"]["UUID"];
                    /** @description ID of the chat session */
                    sessionId: components["schemas"]["UUID"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Chat message retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description No user authentication provided via session cookie */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Allowed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Project, task, chat session, or chat message not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Update a chat message in a chat session */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task */
                    issueId: components["schemas"]["UUID"];
                    /** @description The chat message ID */
                    messageId: components["schemas"]["UUID"];
                    /** @description ID of the chat session */
                    sessionId: components["schemas"]["UUID"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ChatMessageJson"];
                };
            };
            responses: {
                /** @description Chat message updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description No user authentication provided via session cookie */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Chat session is closed or archived */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Project, task, chat session, or chat message not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete a chat message in a chat session */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task */
                    issueId: components["schemas"]["UUID"];
                    /** @description The chat message ID to delete */
                    messageId: components["schemas"]["UUID"];
                    /** @description ID of the chat session */
                    sessionId: components["schemas"]["UUID"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Chat message deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description No user authentication provided via session cookie */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Chat session is closed or archived */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Project, task, chat session, or chat message not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticketing/v1/issues/{issueId}/chats/{sessionId}/participants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get participants in chat session */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task */
                    issueId: components["schemas"]["UUID"];
                    /** @description ID of the chat session */
                    sessionId: components["schemas"]["UUID"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Participants retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description No user authentication provided via session cookie */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Allowed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Project, task, or chat session not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticketing/v1/issues/{issueId}/chats/{sessionId}/participants/{participantId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get participant details in chat session */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task */
                    issueId: components["schemas"]["UUID"];
                    /** @description The participant ID */
                    participantId: components["schemas"]["UUID"];
                    /** @description ID of the chat session */
                    sessionId: components["schemas"]["UUID"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Participant details retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description No user authentication provided via session cookie */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Allowed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Project, task, chat session, or participant not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        /** Remove participant from chat session */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task */
                    issueId: components["schemas"]["UUID"];
                    /** @description The participant ID to remove */
                    participantId: components["schemas"]["UUID"];
                    /** @description ID of the chat session */
                    sessionId: components["schemas"]["UUID"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Participant removed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description No user authentication provided via session cookie */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Allowed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Project, task, chat session, or participant not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticketing/v1/issues/{issueId}/chats/{sessionId}/participants/{participantId}/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Change participant role in chat session */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task */
                    issueId: components["schemas"]["UUID"];
                    /** @description The participant ID */
                    participantId: components["schemas"]["UUID"];
                    /** @description ID of the chat session */
                    sessionId: components["schemas"]["UUID"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": string;
                };
            };
            responses: {
                /** @description Participant role updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description No user authentication provided via session cookie */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Allowed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Project, task, chat session, or participant not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description The address of a customer, a building or a site */
        AddressJson: {
            street?: string;
            city?: string;
            province?: string;
            zip?: string;
            countryCode?: string;
        };
        /** @description An apartment inside a building according to WoFIV */
        ApartmentJson: {
            type?: components["schemas"]["UnitType"];
            /** Format: float */
            livingSpace?: number;
            /** Format: float */
            usableSpace?: number;
            /** Format: float */
            heatingSpace?: number;
            /** Format: float */
            space?: number;
            location?: string;
            description?: string;
            id?: components["schemas"]["UUID"];
            title?: string;
        };
        /** @enum {string} */
        BillingCycle: "WEEKLY" | "MONTHLY";
        /** @description A building as part of a property */
        BuildingJson: {
            type?: components["schemas"]["UnitType"];
            /** Format: float */
            grossFloorArea?: number;
            /** Format: float */
            netFloorArea?: number;
            /** Format: float */
            constructionFloorArea?: number;
            /** Format: float */
            livingSpace?: number;
            /** Format: float */
            usableSpace?: number;
            /** Format: float */
            heatingSpace?: number;
            /** Format: float */
            space?: number;
            location?: string;
            description?: string;
            id?: components["schemas"]["UUID"];
            title?: string;
            address?: components["schemas"]["AddressJson"];
        };
        /** @description A single chat message */
        ChatMessageJson: {
            messageId?: components["schemas"]["UUID"];
            sessionId?: components["schemas"]["UUID"];
            senderId?: components["schemas"]["UUID"];
            contentType?: string;
            content?: string;
            url?: string;
            createdAt?: components["schemas"]["Instant"];
            modifiedAt?: components["schemas"]["Instant"];
        };
        /** @description A list of chat messages */
        ChatMessageListJson: {
            messages?: components["schemas"]["ChatMessageJson"][];
        };
        /** @description A chat session */
        ChatSessionJson: {
            sessionId?: components["schemas"]["UUID"];
            projectId?: components["schemas"]["UUID"];
            issueId?: components["schemas"]["UUID"];
            createdAt?: components["schemas"]["Instant"];
            modifiedAt?: components["schemas"]["Instant"];
        };
        /** @description A list of chat sessions */
        ChatSessionListJson: {
            /**
             * Format: int32
             * @description Number of chat sessions in the list
             */
            size: number;
            chatSessions?: components["schemas"]["ChatSessionJson"][];
        };
        /** @description An commercial inside a building */
        CommercialJson: {
            type?: components["schemas"]["UnitType"];
            /** Format: float */
            netFloorArea?: number;
            /** Format: float */
            usableFloorArea?: number;
            /** Format: float */
            technicalServicesArea?: number;
            /** Format: float */
            trafficArea?: number;
            /** Format: float */
            heatingSpace?: number;
            /** Format: float */
            space?: number;
            location?: string;
            description?: string;
            id?: components["schemas"]["UUID"];
            title?: string;
        };
        /** @description A contractor */
        ContractorJson: {
            id?: components["schemas"]["UUID"];
            projectId?: components["schemas"]["UUID"];
            companyName?: string;
            phone?: string;
            email?: string;
            trade?: string;
        };
        /** @description A country item of a list */
        CountryItemJson: {
            countryCode: string;
            name: string;
        };
        /** @description A list of countries */
        CountryListJson: {
            countries?: components["schemas"]["CountryItemJson"][];
        };
        /**
         * Format: date-time
         * @example 2022-03-10T16:15:50Z
         */
        Instant: string;
        /** @description An issue item with basic information */
        IssueItemJson: {
            id?: components["schemas"]["UUID"];
            name?: string;
            title?: string;
            type?: components["schemas"]["Type"];
            status?: components["schemas"]["Status"];
            owner?: components["schemas"]["UUID"];
        };
        /** @description An issue */
        IssueJson: {
            reporterId?: components["schemas"]["UUID"];
            tenancyId?: components["schemas"]["UUID"];
            id?: components["schemas"]["UUID"];
            projectId?: components["schemas"]["UUID"];
            title?: string;
            type?: components["schemas"]["Type"];
            status?: components["schemas"]["Status"];
            ownerId?: components["schemas"]["UUID"];
            description?: string;
            blockedBy?: components["schemas"]["UUID"];
            relatedTo?: components["schemas"]["UUID"];
            duplicateOf?: components["schemas"]["UUID"];
        };
        /** @description A list of issues */
        IssueListJson: {
            /**
             * Format: int32
             * @description Index of the first element in list of total available entries, starting at 1
             * @example 1
             */
            first: number;
            /**
             * Format: int32
             * @description Number of elements in list
             * @default 10
             */
            size: number;
            /**
             * Format: int32
             * @description Total number of available elements
             */
            total: number;
            issues?: components["schemas"]["IssueItemJson"][];
        };
        /**
         * Format: date
         * @example 2022-03-10
         */
        LocalDate: string;
        /**
         * Format: date-time
         * @example 2022-03-10T12:15:50
         */
        LocalDateTime: string;
        /** @enum {string} */
        MemberRole: "PROPRIETOR" | "MANAGER" | "LESSOR" | "STAFF" | "COLLABORATOR";
        /** @description A project item with the user's member role only */
        ProjectItemJson: {
            id: components["schemas"]["UUID"];
            name: string;
            memberRole: components["schemas"]["MemberRole"];
        };
        /** @description A project */
        ProjectJson: {
            id?: components["schemas"]["UUID"];
            title: string;
            members?: components["schemas"]["ProjectMemberJson"][];
        };
        /** @description A list of projects */
        ProjectListJson: {
            /**
             * Format: int32
             * @description Index of the first element in projects list of total available entries, starting at 1
             * @example 1
             */
            first: number;
            /**
             * Format: int32
             * @description Number of elements in projects list
             * @default 10
             */
            size: number;
            /**
             * Format: int64
             * @description Total number of available projects
             */
            total: number;
            projects?: components["schemas"]["ProjectItemJson"][];
        };
        /** @description Project member information in context of a project */
        ProjectMemberJson: {
            privileged?: boolean;
            id?: components["schemas"]["UUID"];
            name?: string;
            email?: string;
            active?: boolean;
            role: components["schemas"]["MemberRole"];
        };
        /** @description A list of project members */
        ProjectMemberListJson: {
            members: components["schemas"]["ProjectMemberJson"][];
        };
        /** @description A property */
        PropertyJson: {
            type?: components["schemas"]["UnitType"];
            landRegistry?: string;
            cadastralDistrict?: string;
            sheetNumber?: string;
            /** Format: int32 */
            plotNumber?: number;
            cadastralSection?: string;
            plot?: string;
            economyType?: string;
            location?: string;
            /** Format: int32 */
            plotArea?: number;
            /** Format: float */
            space?: number;
            description?: string;
            id?: components["schemas"]["UUID"];
            title?: string;
        };
        /** @description A list of properties */
        PropertyListJson: {
            properties?: components["schemas"]["RentalUnitTreeNodeJson"][];
        };
        /** @description A rent of a tenancy */
        RentJson: {
            billingCycle: components["schemas"]["BillingCycle"];
            firstPaymentDate: components["schemas"]["LocalDate"];
            lastPaymentDate?: components["schemas"]["LocalDate"];
            /** Format: float */
            basicRent?: number;
            /** Format: float */
            operatingCostsPrepayment?: number;
            /** Format: float */
            heatingCostsPrepayment?: number;
        };
        /** @description Encapsulated data of a project tree node */
        RentalUnitNodeDataJson: {
            id?: components["schemas"]["UUID"];
            /**
             * @description Type of the node (e.g., 'PROPERTY', 'BUILDING')
             * @example PROPERTY
             */
            type: components["schemas"]["UnitType"];
            /**
             * @description Title of the node
             * @example Main Building
             */
            title?: string;
            /**
             * @description Location of the rental unit
             * @example first floor left
             */
            location?: string;
            /**
             * @description Description of the rental unit
             * @example A multi-story office building
             */
            description?: string;
            /**
             * @description Name of the tenant associated with this node
             * @example Doe, John
             */
            tenant?: string;
            /**
             * Format: float
             * @description Usable space in square meters
             * @example 350.5
             */
            space?: number;
        };
        /** @description A tree node representing a project entity */
        RentalUnitTreeNodeJson: {
            /**
             * @description Key of the node
             * @example Property 1
             */
            key: components["schemas"]["UUID"];
            /** @description Data encapsulating node attributes */
            data?: components["schemas"]["RentalUnitNodeDataJson"];
            /** @description Children nodes */
            children?: components["schemas"]["RentalUnitTreeNodeJson"][];
        };
        /** @description A site as part of a property */
        SiteJson: {
            type?: components["schemas"]["UnitType"];
            /** Format: float */
            outdoorArea?: number;
            /** Format: float */
            space?: number;
            location?: string;
            description?: string;
            id?: components["schemas"]["UUID"];
            title?: string;
            address?: components["schemas"]["AddressJson"];
        };
        /** @enum {string} */
        Status: "PENDING" | "OPEN" | "IN_PROGRESS" | "CLOSED" | "REJECTED";
        /** @description A storage inside a building but with living space according to WoFIV */
        StorageJson: {
            type?: components["schemas"]["UnitType"];
            /** Format: float */
            usableSpace?: number;
            /** Format: float */
            heatingSpace?: number;
            /** Format: float */
            space?: number;
            location?: string;
            description?: string;
            id?: components["schemas"]["UUID"];
            title?: string;
        };
        /** @description A tenancy item with basic information from a tenant's perspective */
        TenancyItemJson: {
            id?: string;
            name?: string;
            /**
             * @description Type of the node (e.g., 'PROPERTY', 'BUILDING')
             * @example PROPERTY
             */
            rentalType: components["schemas"]["UnitType"];
            /**
             * @description Title of the node
             * @example Main Building
             */
            rentalTitle?: string;
            active?: boolean;
        };
        /** @description A tenancy of a rentable unit */
        TenancyJson: {
            active?: boolean;
            id?: components["schemas"]["UUID"];
            tenants?: components["schemas"]["UserJson"][];
            startOfRental?: components["schemas"]["LocalDate"];
            endOfRental?: components["schemas"]["LocalDate"];
        };
        /** @description A read-only tenancy of a rentable unit from a tenant's perspective */
        TenancyJson1: {
            id?: string;
            /**
             * @description Type of the node (e.g., 'PROPERTY', 'BUILDING')
             * @example PROPERTY
             */
            rentalType: components["schemas"]["UnitType"];
            /**
             * @description Title of the node
             * @example Main Building
             */
            rentalTitle?: string;
            startOfRental?: components["schemas"]["LocalDate"];
            endOfRental?: components["schemas"]["LocalDate"];
            billingCycle?: components["schemas"]["BillingCycle"];
            /** Format: float */
            basicRent?: number;
            /** Format: float */
            operatingCostsPrepayment?: number;
            /** Format: float */
            heatingCostsPrepayment?: number;
        };
        /** @description A list of tenancies from a tenant's perspective */
        TenancyListJson: {
            tenancies?: components["schemas"]["TenancyItemJson"][];
        };
        /** @enum {string} */
        Type: "APPLICATION" | "TASK" | "DEFECT" | "MAINTENANCE";
        /** Format: uuid */
        UUID: string;
        /** @enum {string} */
        UnitType: "PROPERTY" | "SITE" | "BUILDING" | "APARTMENT" | "STORAGE" | "COMMERCIAL";
        /** @description User information globally */
        UserJson: {
            active?: boolean;
            id?: components["schemas"]["UUID"];
            userRoles?: components["schemas"]["UserRole"][];
            email?: string;
            firstName?: string;
            lastName?: string;
            address?: components["schemas"]["AddressJson"];
            mobilePhoneNumber?: string;
            businessPhoneNumber?: string;
            privatePhoneNumber?: string;
            registeredDate?: components["schemas"]["LocalDate"];
            lastLoginDate?: components["schemas"]["LocalDateTime"];
        };
        /** @enum {string} */
        UserRole: "MANAGER" | "TENANT" | "CONTRACTOR";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
