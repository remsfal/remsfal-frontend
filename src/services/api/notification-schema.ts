/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/address": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve supported countries. */
        get: {
            parameters: {
                query: {
                    /** @description A zip code to map the city */
                    zip: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of suggested cities */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AddressJson"][];
                    };
                };
                /** @description No user authentication provided via session cookie */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/address/countries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve supported countries. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of supported countries */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CountryListJson"];
                    };
                };
                /** @description No user authentication provided via session cookie */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description The address of a customer, a building or a site */
        AddressJson: {
            street?: string;
            city?: string;
            province?: string;
            zip?: string;
            countryCode?: string;
        };
        AddressModel: {
            street?: string;
            city?: string;
            province?: string;
            zip?: string;
            country?: components["schemas"]["Locale"];
        };
        /** @description An apartment inside a building */
        ApartmentJson: {
            id?: string;
            title?: string;
            location?: string;
            description?: string;
            /** Format: float */
            livingSpace?: number;
            /** Format: float */
            usableSpace?: number;
            /** Format: float */
            heatingSpace?: number;
            tenancy?: components["schemas"]["TenancyJson"];
        };
        /** @enum {string} */
        BillingCycle: "WEEKLY" | "MONTHLY";
        /** @description A building as part of a property */
        BuildingJson: {
            tenancy?: components["schemas"]["TenancyModel"];
            id?: string;
            title?: string;
            address?: components["schemas"]["AddressModel"];
            description?: string;
            /** Format: float */
            livingSpace?: number;
            /** Format: float */
            commercialSpace?: number;
            /** Format: float */
            usableSpace?: number;
            /** Format: float */
            heatingSpace?: number;
            differentHeatingSpace?: boolean;
        };
        /** @description A single chat message */
        ChatMessageJson: {
            messageId?: components["schemas"]["UUID"];
            chatSessionId?: components["schemas"]["UUID"];
            senderId?: components["schemas"]["UUID"];
            contentType?: string;
            content?: string;
            url?: string;
            createdAt?: components["schemas"]["Instant"];
        };
        /** @description A list of chat messages */
        ChatMessageListJson: {
            messages?: components["schemas"]["ChatMessageJson"][];
        };
        /** @description A chat session */
        ChatSessionJson: {
            sessionId?: components["schemas"]["UUID"];
            projectId?: components["schemas"]["UUID"];
            taskId?: components["schemas"]["UUID"];
            createdAt?: components["schemas"]["Instant"];
            modifiedAt?: components["schemas"]["Instant"];
        };
        /** @description An commercial inside a building */
        CommercialJson: {
            id?: string;
            title?: string;
            location?: string;
            description?: string;
            /** Format: float */
            commercialSpace?: number;
            /** Format: float */
            usableSpace?: number;
            /** Format: float */
            heatingSpace?: number;
            tenancy?: components["schemas"]["TenancyJson"];
        };
        /** @description A country item of a list */
        CountryItemJson: {
            countryCode: string;
            name: string;
        };
        /** @description A list of countries */
        CountryListJson: {
            countries?: components["schemas"]["CountryItemJson"][];
        };
        CustomerModel: {
            id?: string;
            email?: string;
            active?: boolean;
            name?: string;
            firstName?: string;
            lastName?: string;
            address?: components["schemas"]["AddressModel"];
            mobilePhoneNumber?: string;
            businessPhoneNumber?: string;
            privatePhoneNumber?: string;
            registeredDate?: components["schemas"]["LocalDate"];
            lastLoginDate?: components["schemas"]["LocalDateTime"];
        };
        /** Format: date */
        Date: string;
        /** @description A garage inside a building */
        GarageJson: {
            id?: string;
            title?: string;
            location?: string;
            description?: string;
            /** Format: float */
            usableSpace?: number;
        };
        /** Format: date-time */
        Instant: string;
        /** Format: date */
        LocalDate: string;
        /** Format: date-time */
        LocalDateTime: string;
        Locale: {
            language?: string;
            script?: string;
            country?: string;
            variant?: string;
            extensionKeys?: string[];
            unicodeLocaleAttributes?: string[];
            unicodeLocaleKeys?: string[];
            iSO3Language?: string;
            iSO3Country?: string;
            displayLanguage?: string;
            displayScript?: string;
            displayCountry?: string;
            displayVariant?: string;
            displayName?: string;
        };
        /** @enum {string} */
        MemberRole: "PROPRIETOR" | "MANAGER" | "LESSOR" | "STAFF" | "COLLABORATOR";
        /** @description A project item with the user's member role only */
        ProjectItemJson: {
            id: string;
            name: string;
            memberRole: components["schemas"]["MemberRole"];
        };
        /** @description A project */
        ProjectJson: {
            id?: string;
            title: string;
            members?: components["schemas"]["ProjectMemberJson"][];
        };
        /** @description A list of projects */
        ProjectListJson: {
            /**
             * Format: int32
             * @description Index of the first element in projects list of total available entries, starting at 1
             */
            first: number;
            /**
             * Format: int32
             * @description Number of elements in projects list
             * @default 10
             */
            size: number;
            /**
             * Format: int64
             * @description Total number of available projects
             */
            total: number;
            projects?: components["schemas"]["ProjectItemJson"][];
        };
        /** @description Project member information in context of a project */
        ProjectMemberJson: {
            privileged?: boolean;
            id?: string;
            name?: string;
            email?: string;
            active?: boolean;
            role: components["schemas"]["MemberRole"];
        };
        /** @description A list of project members */
        ProjectMemberListJson: {
            members: components["schemas"]["ProjectMemberJson"][];
        };
        /** @description A project item with the user's member role only */
        PropertyItemJson: {
            id: string;
            title: string;
            landRegisterEntry: string;
            description: string;
            /** Format: int32 */
            plotArea: number;
        };
        /** @description A property */
        PropertyJson: {
            id?: string;
            title?: string;
            landRegisterEntry?: string;
            description?: string;
            /** Format: int32 */
            plotArea?: number;
            /** Format: float */
            effectiveSpace?: number;
        };
        /** @description A list of properties */
        PropertyListJson: {
            properties?: components["schemas"]["RentalUnitTreeNodeJson"][];
        };
        /** @description A rent of a tenancy */
        RentJson: {
            billingCycle: components["schemas"]["BillingCycle"];
            firstPaymentDate: components["schemas"]["LocalDate"];
            lastPaymentDate?: components["schemas"]["LocalDate"];
            /** Format: float */
            basicRent?: number;
            /** Format: float */
            operatingCostsPrepayment?: number;
            /** Format: float */
            heatingCostsPrepayment?: number;
        };
        RentModel: {
            billingCycle?: components["schemas"]["BillingCycle"];
            firstPaymentDate?: components["schemas"]["LocalDate"];
            lastPaymentDate?: components["schemas"]["LocalDate"];
            /** Format: float */
            basicRent?: number;
            /** Format: float */
            operatingCostsPrepayment?: number;
            /** Format: float */
            heatingCostsPrepayment?: number;
        };
        /** @description Encapsulated data of a project tree node */
        RentalUnitNodeDataJson: {
            id?: string;
            /** @description Type of the node (e.g., 'PROPERTY', 'BUILDING') */
            type: components["schemas"]["UnitType"];
            /** @description Title of the node */
            title?: string;
            /** @description Description of the node */
            description?: string;
            /** @description Name of the tenant associated with this node */
            tenant?: string;
            /**
             * Format: float
             * @description Usable space in square meters
             */
            usableSpace?: number;
        };
        /** @description A tree node representing a project entity */
        RentalUnitTreeNodeJson: {
            /** @description Key of the node */
            key: string;
            /** @description Data encapsulating node attributes */
            data?: components["schemas"]["RentalUnitNodeDataJson"];
            /** @description Children nodes */
            children?: components["schemas"]["RentalUnitTreeNodeJson"][];
        };
        /** @description A site as part of a property */
        SiteJson: {
            id?: string;
            title?: string;
            address?: components["schemas"]["AddressJson"];
            description?: string;
            tenancy?: components["schemas"]["TenancyJson"];
            /** Format: float */
            usableSpace?: number;
        };
        /** @enum {string} */
        Status: "PENDING" | "OPEN" | "IN_PROGRESS" | "CLOSED" | "REJECTED";
        /** @description A task item with basic information */
        TaskItemJson: {
            id: string;
            name: string;
            title: string;
            status: components["schemas"]["Status"];
            owner: string;
        };
        /** @description A task */
        TaskJson: {
            type?: components["schemas"]["Type"];
            id?: string;
            projectId?: string;
            title?: string;
            status?: components["schemas"]["Status"];
            ownerId?: string;
            description?: string;
            blockedBy?: string;
            relatedTo?: string;
            duplicateOf?: string;
            createdAt?: components["schemas"]["Date"];
            modifiedAt?: components["schemas"]["Date"];
        };
        /** @description A list of tasks */
        TaskListJson: {
            tasks?: components["schemas"]["TaskItemJson"][];
        };
        /** @description A tenancy of a rentable unit */
        TenancyJson: {
            id?: string;
            rent?: components["schemas"]["RentJson"][];
            tenant?: components["schemas"]["UserJson"];
            startOfRental?: components["schemas"]["LocalDate"];
            endOfRental?: components["schemas"]["LocalDate"];
        };
        TenancyModel: {
            id?: string;
            rent?: components["schemas"]["RentModel"][];
            tenant?: components["schemas"]["CustomerModel"];
            startOfRental?: components["schemas"]["LocalDate"];
            endOfRental?: components["schemas"]["LocalDate"];
        };
        /** @enum {string} */
        Type: "TASK" | "DEFECT" | "MAINTENANCE";
        /** Format: uuid */
        UUID: string;
        /** @enum {string} */
        UnitType: "PROPERTY" | "SITE" | "BUILDING" | "APARTMENT" | "COMMERCIAL" | "GARAGE";
        /** @description User information globally */
        UserJson: {
            active?: boolean;
            id?: string;
            email?: string;
            firstName?: string;
            lastName?: string;
            address?: components["schemas"]["AddressJson"];
            mobilePhoneNumber?: string;
            businessPhoneNumber?: string;
            privatePhoneNumber?: string;
            registeredDate?: components["schemas"]["LocalDate"];
            lastLoginDate?: components["schemas"]["LocalDateTime"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;