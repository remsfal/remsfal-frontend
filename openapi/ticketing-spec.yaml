---
openapi: 3.1.0
components:
  schemas:
    AddressJson:
      description: "The address of a customer, a building or a site"
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        province:
          type: string
        zip:
          type: string
          pattern: "^\\d{4,5}$"
        countryCode:
          type: string
    ApartmentJson:
      description: An apartment inside a building according to WoFIV
      type: object
      properties:
        type:
          $ref: "#/components/schemas/UnitType"
        livingSpace:
          type: number
          format: float
          minimum: 0
        usableSpace:
          type: number
          format: float
          minimum: 0
        heatingSpace:
          type: number
          format: float
          minimum: 0
        space:
          type: number
          format: float
        location:
          type: string
        description:
          type: string
        id:
          $ref: "#/components/schemas/UUID"
        title:
          type: string
          maxLength: 255
    BillingCycle:
      type: string
      enum:
      - WEEKLY
      - MONTHLY
    BuildingJson:
      description: A building as part of a property
      type: object
      properties:
        type:
          $ref: "#/components/schemas/UnitType"
        grossFloorArea:
          type: number
          format: float
          minimum: 0
        netFloorArea:
          type: number
          format: float
          minimum: 0
        constructionFloorArea:
          type: number
          format: float
          minimum: 0
        livingSpace:
          type: number
          format: float
          minimum: 0
        usableSpace:
          type: number
          format: float
          minimum: 0
        heatingSpace:
          type: number
          format: float
          minimum: 0
        space:
          type: number
          format: float
        location:
          type: string
        description:
          type: string
        id:
          $ref: "#/components/schemas/UUID"
        title:
          type: string
          maxLength: 255
        address:
          $ref: "#/components/schemas/AddressJson"
    ChatMessageJson:
      description: A single chat message
      type: object
      properties:
        messageId:
          $ref: "#/components/schemas/UUID"
        sessionId:
          $ref: "#/components/schemas/UUID"
        senderId:
          $ref: "#/components/schemas/UUID"
        contentType:
          type: string
        content:
          type: string
        url:
          type: string
        createdAt:
          $ref: "#/components/schemas/Instant"
        modifiedAt:
          $ref: "#/components/schemas/Instant"
    ChatMessageListJson:
      description: A list of chat messages
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/ChatMessageJson"
    ChatSessionJson:
      description: A chat session
      type: object
      properties:
        sessionId:
          $ref: "#/components/schemas/UUID"
        projectId:
          $ref: "#/components/schemas/UUID"
        issueId:
          $ref: "#/components/schemas/UUID"
        createdAt:
          $ref: "#/components/schemas/Instant"
        modifiedAt:
          $ref: "#/components/schemas/Instant"
    ChatSessionListJson:
      description: A list of chat sessions
      type: object
      required:
      - size
      properties:
        size:
          type: integer
          format: int32
          description: Number of chat sessions in the list
        chatSessions:
          type: array
          items:
            $ref: "#/components/schemas/ChatSessionJson"
    CommercialJson:
      description: An commercial inside a building
      type: object
      properties:
        type:
          $ref: "#/components/schemas/UnitType"
        netFloorArea:
          type: number
          format: float
          minimum: 0
        usableFloorArea:
          type: number
          format: float
          minimum: 0
        technicalServicesArea:
          type: number
          format: float
          minimum: 0
        trafficArea:
          type: number
          format: float
          minimum: 0
        heatingSpace:
          type: number
          format: float
          minimum: 0
        space:
          type: number
          format: float
        location:
          type: string
        description:
          type: string
        id:
          $ref: "#/components/schemas/UUID"
        title:
          type: string
          maxLength: 255
    ContractorJson:
      description: A contractor
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        projectId:
          $ref: "#/components/schemas/UUID"
        companyName:
          type: string
          maxLength: 255
        phone:
          type: string
          pattern: "^\\+?[0-9]{10,14}$"
          maxLength: 15
        email:
          type: string
          maxLength: 255
        trade:
          type: string
          maxLength: 255
    CountryItemJson:
      description: A country item of a list
      type: object
      required:
      - countryCode
      - name
      properties:
        countryCode:
          type: string
          minLength: 1
        name:
          type: string
          minLength: 1
    CountryListJson:
      description: A list of countries
      type: object
      properties:
        countries:
          type: array
          items:
            $ref: "#/components/schemas/CountryItemJson"
    Instant:
      type: string
      format: date-time
      examples:
      - 2022-03-10T16:15:50Z
    IssueItemJson:
      description: An issue item with basic information
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
        title:
          type: string
        type:
          $ref: "#/components/schemas/Type"
        status:
          $ref: "#/components/schemas/Status"
        owner:
          $ref: "#/components/schemas/UUID"
    IssueJson:
      description: An issue
      type: object
      properties:
        reporterId:
          $ref: "#/components/schemas/UUID"
        tenancyId:
          $ref: "#/components/schemas/UUID"
        id:
          $ref: "#/components/schemas/UUID"
        projectId:
          $ref: "#/components/schemas/UUID"
        title:
          type: string
          maxLength: 255
        type:
          $ref: "#/components/schemas/Type"
        status:
          $ref: "#/components/schemas/Status"
        ownerId:
          $ref: "#/components/schemas/UUID"
        description:
          type: string
        blockedBy:
          $ref: "#/components/schemas/UUID"
        relatedTo:
          $ref: "#/components/schemas/UUID"
        duplicateOf:
          $ref: "#/components/schemas/UUID"
    IssueListJson:
      description: A list of issues
      type: object
      required:
      - first
      - size
      - total
      properties:
        first:
          type: integer
          format: int32
          description: "Index of the first element in list of total available entries,\
            \ starting at 1"
          examples:
          - 1
        size:
          type: integer
          format: int32
          maximum: 100
          minimum: 1
          description: Number of elements in list
          default: 10
        total:
          type: integer
          format: int32
          description: Total number of available elements
        issues:
          type: array
          items:
            $ref: "#/components/schemas/IssueItemJson"
    LocalDate:
      type: string
      format: date
      examples:
      - 2022-03-10
    LocalDateTime:
      type: string
      format: date-time
      examples:
      - 2022-03-10T12:15:50
    MemberRole:
      type: string
      enum:
      - PROPRIETOR
      - MANAGER
      - LESSOR
      - STAFF
      - COLLABORATOR
    ProjectItemJson:
      description: A project item with the user's member role only
      type: object
      required:
      - id
      - name
      - memberRole
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
        memberRole:
          $ref: "#/components/schemas/MemberRole"
    ProjectJson:
      description: A project
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        title:
          type: string
          pattern: \S
          minLength: 1
          maxLength: 99
        members:
          type: array
          uniqueItems: true
          items:
            $ref: "#/components/schemas/ProjectMemberJson"
      required:
      - title
    ProjectListJson:
      description: A list of projects
      type: object
      required:
      - first
      - size
      - total
      properties:
        first:
          type: integer
          format: int32
          description: "Index of the first element in projects list of total available\
            \ entries, starting at 1"
          examples:
          - 1
        size:
          type: integer
          format: int32
          maximum: 100
          minimum: 1
          description: Number of elements in projects list
          default: 10
        total:
          type: integer
          format: int64
          description: Total number of available projects
        projects:
          type: array
          items:
            $ref: "#/components/schemas/ProjectItemJson"
    ProjectMemberJson:
      type: object
      description: Project member information in context of a project
      properties:
        privileged:
          type: boolean
        id:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
        email:
          type: string
        active:
          type: boolean
        role:
          $ref: "#/components/schemas/MemberRole"
      required:
      - role
    ProjectMemberListJson:
      description: A list of project members
      type: object
      required:
      - members
      properties:
        members:
          type: array
          items:
            $ref: "#/components/schemas/ProjectMemberJson"
    PropertyJson:
      description: A property
      type: object
      properties:
        type:
          $ref: "#/components/schemas/UnitType"
        landRegistry:
          type: string
        cadastralDistrict:
          type: string
        sheetNumber:
          type: string
        plotNumber:
          type: integer
          format: int32
          exclusiveMinimum: 0
        cadastralSection:
          type: string
        plot:
          type: string
        economyType:
          type: string
        location:
          type: string
        plotArea:
          type: integer
          format: int32
          minimum: 0
        space:
          type: number
          format: float
        description:
          type: string
        id:
          $ref: "#/components/schemas/UUID"
        title:
          type: string
          maxLength: 255
    PropertyListJson:
      description: A list of properties
      type: object
      properties:
        properties:
          type: array
          items:
            $ref: "#/components/schemas/RentalUnitTreeNodeJson"
    RentJson:
      description: A rent of a tenancy
      type: object
      required:
      - billingCycle
      - firstPaymentDate
      properties:
        billingCycle:
          $ref: "#/components/schemas/BillingCycle"
        firstPaymentDate:
          $ref: "#/components/schemas/LocalDate"
        lastPaymentDate:
          $ref: "#/components/schemas/LocalDate"
        basicRent:
          type: number
          format: float
          minimum: 0
        operatingCostsPrepayment:
          type: number
          format: float
          minimum: 0
        heatingCostsPrepayment:
          type: number
          format: float
          minimum: 0
    RentalUnitNodeDataJson:
      type: object
      description: Encapsulated data of a project tree node
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        type:
          description: "Type of the node (e.g., 'PROPERTY', 'BUILDING')"
          type: string
          examples:
          - PROPERTY
          $ref: "#/components/schemas/UnitType"
        title:
          type: string
          description: Title of the node
          examples:
          - Main Building
        location:
          type: string
          description: Location of the rental unit
          examples:
          - first floor left
        description:
          type: string
          description: Description of the rental unit
          examples:
          - A multi-story office building
        tenant:
          type: string
          description: Name of the tenant associated with this node
          examples:
          - "Doe, John"
        space:
          type: number
          format: float
          description: Usable space in square meters
          examples:
          - 350.5
      required:
      - type
    RentalUnitTreeNodeJson:
      type: object
      description: A tree node representing a project entity
      required:
      - key
      properties:
        key:
          description: Key of the node
          type: string
          examples:
          - Property 1
          $ref: "#/components/schemas/UUID"
        data:
          description: Data encapsulating node attributes
          type: object
          $ref: "#/components/schemas/RentalUnitNodeDataJson"
        children:
          type: array
          items:
            $ref: "#/components/schemas/RentalUnitTreeNodeJson"
          description: Children nodes
    SiteJson:
      description: A site as part of a property
      type: object
      properties:
        type:
          $ref: "#/components/schemas/UnitType"
        outdoorArea:
          type: number
          format: float
          minimum: 0
        space:
          type: number
          format: float
        location:
          type: string
        description:
          type: string
        id:
          $ref: "#/components/schemas/UUID"
        title:
          type: string
          maxLength: 255
        address:
          $ref: "#/components/schemas/AddressJson"
    Status:
      type: string
      enum:
      - PENDING
      - OPEN
      - IN_PROGRESS
      - CLOSED
      - REJECTED
    StorageJson:
      description: A storage inside a building but with living space according to
        WoFIV
      type: object
      properties:
        type:
          $ref: "#/components/schemas/UnitType"
        usableSpace:
          type: number
          format: float
          minimum: 0
        heatingSpace:
          type: number
          format: float
          minimum: 0
        space:
          type: number
          format: float
        location:
          type: string
        description:
          type: string
        id:
          $ref: "#/components/schemas/UUID"
        title:
          type: string
          maxLength: 255
    TenancyItemJson:
      description: A tenancy item with basic information from a tenant's perspective
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        rentalType:
          description: "Type of the node (e.g., 'PROPERTY', 'BUILDING')"
          type: string
          examples:
          - PROPERTY
          $ref: "#/components/schemas/UnitType"
        rentalTitle:
          type: string
          description: Title of the node
          examples:
          - Main Building
        active:
          type: boolean
      required:
      - rentalType
    TenancyJson:
      description: A tenancy of a rentable unit
      type: object
      properties:
        active:
          type: boolean
        id:
          $ref: "#/components/schemas/UUID"
        tenants:
          type: array
          items:
            $ref: "#/components/schemas/UserJson"
        startOfRental:
          $ref: "#/components/schemas/LocalDate"
        endOfRental:
          $ref: "#/components/schemas/LocalDate"
    TenancyJson1:
      description: A read-only tenancy of a rentable unit from a tenant's perspective
      type: object
      properties:
        id:
          type: string
        rentalType:
          description: "Type of the node (e.g., 'PROPERTY', 'BUILDING')"
          type: string
          examples:
          - PROPERTY
          $ref: "#/components/schemas/UnitType"
        rentalTitle:
          type: string
          description: Title of the node
          examples:
          - Main Building
        startOfRental:
          $ref: "#/components/schemas/LocalDate"
        endOfRental:
          $ref: "#/components/schemas/LocalDate"
        billingCycle:
          $ref: "#/components/schemas/BillingCycle"
        basicRent:
          type: number
          format: float
        operatingCostsPrepayment:
          type: number
          format: float
        heatingCostsPrepayment:
          type: number
          format: float
      required:
      - rentalType
    TenancyListJson:
      description: A list of tenancies from a tenant's perspective
      type: object
      properties:
        tenancies:
          type: array
          items:
            $ref: "#/components/schemas/TenancyItemJson"
    Type:
      type: string
      enum:
      - APPLICATION
      - TASK
      - DEFECT
      - MAINTENANCE
    UUID:
      type: string
      format: uuid
      pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
    UnitType:
      type: string
      enum:
      - PROPERTY
      - SITE
      - BUILDING
      - APARTMENT
      - STORAGE
      - COMMERCIAL
    UserJson:
      description: User information globally
      type: object
      properties:
        active:
          type: boolean
        id:
          $ref: "#/components/schemas/UUID"
        userRoles:
          type: array
          uniqueItems: true
          items:
            $ref: "#/components/schemas/UserRole"
        email:
          type: string
          maxLength: 255
        firstName:
          type: string
          minLength: 3
          maxLength: 255
        lastName:
          type: string
          minLength: 3
          maxLength: 255
        address:
          $ref: "#/components/schemas/AddressJson"
        mobilePhoneNumber:
          type: string
          pattern: "^\\+[1-9]\\d{4,14}$"
        businessPhoneNumber:
          type: string
          pattern: "^\\+[1-9]\\d{4,14}$"
        privatePhoneNumber:
          type: string
          pattern: "^\\+[1-9]\\d{4,14}$"
        registeredDate:
          $ref: "#/components/schemas/LocalDate"
        lastLoginDate:
          $ref: "#/components/schemas/LocalDateTime"
    UserRole:
      type: string
      enum:
      - MANAGER
      - TENANT
      - CONTRACTOR
  securitySchemes:
    SecurityScheme:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Authentication
paths:
  /ticketing/v1/issues:
    get:
      summary: Retrieve information for all issues.
      parameters:
      - description: Maximum number of projects to return
        name: limit
        in: query
        schema:
          type: integer
          format: int32
          maximum: 500
          exclusiveMinimum: 0
          default: "50"
        required: true
      - description: Offset of the first project to return
        name: offset
        in: query
        schema:
          type: integer
          format: int32
          minimum: 0
          default: "0"
        required: true
      - description: Filter to return only issues of a specific user
        name: owner
        in: query
        schema:
          $ref: "#/components/schemas/UUID"
      - description: Filter to return only issues of a specific project
        name: projectId
        in: query
        schema:
          $ref: "#/components/schemas/UUID"
      - description: Filter to return only issuesfor a specific rental
        name: rentalId
        in: query
        schema:
          $ref: "#/components/schemas/UUID"
      - description: Filter to return only issuesfor a specific rental type
        name: rentalType
        in: query
        schema:
          $ref: "#/components/schemas/UnitType"
      - description: Filter to return only issues with a specific status
        name: status
        in: query
        schema:
          $ref: "#/components/schemas/Status"
      - description: Filter to return only issuesfor a specific tenancy
        name: tenancyId
        in: query
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "401":
          description: No user authentication provided via session cookie
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      summary: Create a new issue.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IssueJson"
        required: true
      responses:
        "201":
          description: Issue created successfully
          headers:
            Location:
              description: URL of the new issue
        "401":
          description: No user authentication provided via session cookie
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /ticketing/v1/issues/{issueId}:
    patch:
      summary: Update information of an issue.
      parameters:
      - description: ID of the issue
        required: true
        name: issueId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IssueJson"
        required: true
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The issue does not exist
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    get:
      summary: Retrieve information of an issue.
      parameters:
      - description: ID of the issue
        required: true
        name: issueId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The property does not exist
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      summary: Delete an existing issue.
      parameters:
      - description: ID of the issue
        required: true
        name: issueId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "204":
          description: The issue was deleted successfully
        "401":
          description: No user authentication provided via session cookie
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /ticketing/v1/issues/{issueId}/chats:
    get:
      summary: Get all chat sessions for an issue
      parameters:
      - description: ID of the task
        required: true
        name: issueId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Chat sessions retrieved
        "404":
          description: Project or task not found
        "401":
          description: No user authentication provided via session cookie
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      summary: Create a new chat session
      parameters:
      - description: ID of the task
        required: true
        name: issueId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "201":
          description: Chat session created
        "400":
          description: Invalid input
        "404":
          description: Project or task not found
        "401":
          description: No user authentication provided via session cookie
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /ticketing/v1/issues/{issueId}/chats/{sessionId}:
    get:
      summary: Get chat session details
      parameters:
      - description: ID of the task
        required: true
        name: issueId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      - description: ID of the chat session
        required: true
        name: sessionId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Chat session details retrieved
        "400":
          description: Invalid input
        "404":
          description: "Project, task, or chat session not found"
        "401":
          description: No user authentication provided via session cookie
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      summary: Delete chat session
      parameters:
      - description: ID of the task
        required: true
        name: issueId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      - description: ID of the chat session
        required: true
        name: sessionId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Chat session deleted
        "400":
          description: Invalid input
        "404":
          description: "Project, task, or chat session not found"
        "401":
          description: No user authentication provided via session cookie
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /ticketing/v1/issues/{issueId}/chats/{sessionId}/messages:
    post:
      summary: Send a chat message in a chat session
      parameters:
      - description: ID of the task
        required: true
        name: issueId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      - description: ID of the chat session
        required: true
        name: sessionId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatMessageJson"
        required: true
      responses:
        "201":
          description: Chat message sent
        "400":
          description: Invalid input
        "403":
          description: Chat session is closed or archived
        "404":
          description: "Project, task, or chat session not found"
        "401":
          description: No user authentication provided via session cookie
      security:
      - SecurityScheme: []
    get:
      summary: Get chat logs in a chat session
      parameters:
      - description: ID of the task
        required: true
        name: issueId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      - description: ID of the chat session
        required: true
        name: sessionId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Chat messages retrieved
        "400":
          description: Invalid input
        "404":
          description: "Project, task, or chat session not found"
        "401":
          description: No user authentication provided via session cookie
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /ticketing/v1/issues/{issueId}/chats/{sessionId}/messages/upload:
    post:
      summary: Send a file in a chat session
      parameters:
      - description: ID of the task
        required: true
        name: issueId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      - description: ID of the chat session
        required: true
        name: sessionId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
        required: true
      responses:
        "201":
          description: File sent
        "400":
          description: Invalid input
        "403":
          description: Chat session is closed or archived
        "404":
          description: "Project, task, or chat session not found"
        "401":
          description: No user authentication provided via session cookie
      security:
      - SecurityScheme: []
  /ticketing/v1/issues/{issueId}/chats/{sessionId}/messages/{messageId}:
    put:
      summary: Update a chat message in a chat session
      parameters:
      - description: ID of the task
        required: true
        name: issueId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      - description: The chat message ID
        required: true
        name: messageId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      - description: ID of the chat session
        required: true
        name: sessionId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatMessageJson"
        required: true
      responses:
        "200":
          description: Chat message updated
        "400":
          description: Invalid input
        "403":
          description: Chat session is closed or archived
        "404":
          description: "Project, task, chat session, or chat message not found"
        "401":
          description: No user authentication provided via session cookie
      security:
      - SecurityScheme: []
    get:
      summary: Get a chat message in a chat session
      parameters:
      - description: ID of the task
        required: true
        name: issueId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      - description: The chat message ID
        required: true
        name: messageId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      - description: ID of the chat session
        required: true
        name: sessionId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Chat message retrieved
        "400":
          description: Invalid input
        "404":
          description: "Project, task, chat session, or chat message not found"
        "401":
          description: No user authentication provided via session cookie
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      summary: Delete a chat message in a chat session
      parameters:
      - description: ID of the task
        required: true
        name: issueId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      - description: The chat message ID to delete
        required: true
        name: messageId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      - description: ID of the chat session
        required: true
        name: sessionId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Chat message deleted
        "400":
          description: Invalid input
        "403":
          description: Chat session is closed or archived
        "404":
          description: "Project, task, chat session, or chat message not found"
        "401":
          description: No user authentication provided via session cookie
      security:
      - SecurityScheme: []
  /ticketing/v1/issues/{issueId}/chats/{sessionId}/participants:
    get:
      summary: Get participants in chat session
      parameters:
      - description: ID of the task
        required: true
        name: issueId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      - description: ID of the chat session
        required: true
        name: sessionId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Participants retrieved
        "400":
          description: Invalid input
        "404":
          description: "Project, task, or chat session not found"
        "401":
          description: No user authentication provided via session cookie
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /ticketing/v1/issues/{issueId}/chats/{sessionId}/participants/{participantId}:
    delete:
      summary: Remove participant from chat session
      parameters:
      - description: ID of the task
        required: true
        name: issueId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      - description: The participant ID to remove
        required: true
        name: participantId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      - description: ID of the chat session
        required: true
        name: sessionId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Participant removed
        "400":
          description: Invalid input
        "404":
          description: "Project, task, chat session, or participant not found"
        "401":
          description: No user authentication provided via session cookie
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    get:
      summary: Get participant details in chat session
      parameters:
      - description: ID of the task
        required: true
        name: issueId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      - description: The participant ID
        required: true
        name: participantId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      - description: ID of the chat session
        required: true
        name: sessionId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Participant details retrieved
        "400":
          description: Invalid input
        "404":
          description: "Project, task, chat session, or participant not found"
        "401":
          description: No user authentication provided via session cookie
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /ticketing/v1/issues/{issueId}/chats/{sessionId}/participants/{participantId}/role:
    put:
      summary: Change participant role in chat session
      parameters:
      - description: ID of the task
        required: true
        name: issueId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      - description: The participant ID
        required: true
        name: participantId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      - description: ID of the chat session
        required: true
        name: sessionId
        in: path
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: Participant role updated
        "400":
          description: Invalid input
        "404":
          description: "Project, task, chat session, or participant not found"
        "401":
          description: No user authentication provided via session cookie
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
info:
  title: remsfal-ticketing API
  version: 1.0.0-SNAPSHOT
servers:
- url: http://localhost:8081
  description: Auto generated value
- url: http://0.0.0.0:8081
  description: Auto generated value
