---
openapi: 3.1.0
components:
  schemas:
    AddressJson:
      description: "The address of a customer, a building or a site"
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        province:
          type: string
        zip:
          type: string
          pattern: "^\\d{4,5}$"
        countryCode:
          type: string
    AddressModel:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        province:
          type: string
        zip:
          type: string
        country:
          $ref: "#/components/schemas/Locale"
    ApartmentJson:
      description: An apartment inside a building according to WoFIV
      type: object
      properties:
        type:
          $ref: "#/components/schemas/UnitType"
        livingSpace:
          type: number
          format: float
          minimum: 0
        usableSpace:
          type: number
          format: float
          minimum: 0
        heatingSpace:
          type: number
          format: float
          minimum: 0
        space:
          type: number
          format: float
        location:
          type: string
        description:
          type: string
        id:
          type: string
        title:
          type: string
          maxLength: 255
    BillingCycle:
      type: string
      enum:
      - WEEKLY
      - MONTHLY
    BuildingJson:
      description: A building as part of a property
      type: object
      properties:
        type:
          $ref: "#/components/schemas/UnitType"
        grossFloorArea:
          type: number
          format: float
          minimum: 0
        netFloorArea:
          type: number
          format: float
          minimum: 0
        constructionFloorArea:
          type: number
          format: float
          minimum: 0
        livingSpace:
          type: number
          format: float
          minimum: 0
        usableSpace:
          type: number
          format: float
          minimum: 0
        heatingSpace:
          type: number
          format: float
          minimum: 0
        space:
          type: number
          format: float
        location:
          type: string
        description:
          type: string
        id:
          type: string
        title:
          type: string
          maxLength: 255
        address:
          $ref: "#/components/schemas/AddressModel"
    ChatMessageJson:
      description: A single chat message
      type: object
      properties:
        messageId:
          $ref: "#/components/schemas/UUID"
        chatSessionId:
          $ref: "#/components/schemas/UUID"
        senderId:
          $ref: "#/components/schemas/UUID"
        contentType:
          type: string
        content:
          type: string
        url:
          type: string
        createdAt:
          $ref: "#/components/schemas/Instant"
    ChatMessageListJson:
      description: A list of chat messages
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/ChatMessageJson"
    ChatSessionJson:
      description: A chat session
      type: object
      properties:
        sessionId:
          $ref: "#/components/schemas/UUID"
        projectId:
          $ref: "#/components/schemas/UUID"
        taskId:
          $ref: "#/components/schemas/UUID"
        createdAt:
          $ref: "#/components/schemas/Instant"
        modifiedAt:
          $ref: "#/components/schemas/Instant"
    CommercialJson:
      description: An commercial inside a building
      type: object
      properties:
        type:
          $ref: "#/components/schemas/UnitType"
        netFloorArea:
          type: number
          format: float
          minimum: 0
        usableFloorArea:
          type: number
          format: float
          minimum: 0
        technicalServicesArea:
          type: number
          format: float
          minimum: 0
        trafficArea:
          type: number
          format: float
          minimum: 0
        heatingSpace:
          type: number
          format: float
          minimum: 0
        space:
          type: number
          format: float
        location:
          type: string
        description:
          type: string
        id:
          type: string
        title:
          type: string
          maxLength: 255
    CountryItemJson:
      description: A country item of a list
      type: object
      required:
      - countryCode
      - name
      properties:
        countryCode:
          type: string
          minLength: 1
        name:
          type: string
          minLength: 1
    CountryListJson:
      description: A list of countries
      type: object
      properties:
        countries:
          type: array
          items:
            $ref: "#/components/schemas/CountryItemJson"
    Date:
      type: string
      format: date
      examples:
      - 2022-03-10
    Instant:
      type: string
      format: date-time
      examples:
      - 2022-03-10T16:15:50Z
    LocalDate:
      type: string
      format: date
      examples:
      - 2022-03-10
    LocalDateTime:
      type: string
      format: date-time
      examples:
      - 2022-03-10T12:15:50
    Locale:
      type: object
      properties:
        language:
          type: string
        script:
          type: string
        country:
          type: string
        variant:
          type: string
        extensionKeys:
          type: array
          uniqueItems: true
          items:
            type: string
            format: char
        unicodeLocaleAttributes:
          type: array
          uniqueItems: true
          items:
            type: string
        unicodeLocaleKeys:
          type: array
          uniqueItems: true
          items:
            type: string
        iSO3Language:
          type: string
        iSO3Country:
          type: string
        displayLanguage:
          type: string
        displayScript:
          type: string
        displayCountry:
          type: string
        displayVariant:
          type: string
        displayName:
          type: string
    MemberRole:
      type: string
      enum:
      - PROPRIETOR
      - MANAGER
      - LESSOR
      - STAFF
      - COLLABORATOR
    ProjectItemJson:
      description: A project item with the user's member role only
      type: object
      required:
      - id
      - name
      - memberRole
      properties:
        id:
          type: string
        name:
          type: string
        memberRole:
          $ref: "#/components/schemas/MemberRole"
    ProjectJson:
      description: A project
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          pattern: \S
          minLength: 1
          maxLength: 99
        members:
          type: array
          uniqueItems: true
          items:
            $ref: "#/components/schemas/ProjectMemberJson"
      required:
      - title
    ProjectListJson:
      description: A list of projects
      type: object
      required:
      - first
      - size
      - total
      properties:
        first:
          type: integer
          format: int32
          description: "Index of the first element in projects list of total available\
            \ entries, starting at 1"
          examples:
          - 1
        size:
          type: integer
          format: int32
          maximum: 100
          minimum: 1
          description: Number of elements in projects list
          default: 10
        total:
          type: integer
          format: int64
          description: Total number of available projects
        projects:
          type: array
          items:
            $ref: "#/components/schemas/ProjectItemJson"
    ProjectMemberJson:
      type: object
      description: Project member information in context of a project
      properties:
        privileged:
          type: boolean
        id:
          type: string
        name:
          type: string
        email:
          type: string
        active:
          type: boolean
        role:
          $ref: "#/components/schemas/MemberRole"
      required:
      - role
    ProjectMemberListJson:
      description: A list of project members
      type: object
      required:
      - members
      properties:
        members:
          type: array
          items:
            $ref: "#/components/schemas/ProjectMemberJson"
    PropertyJson:
      description: A property
      type: object
      properties:
        type:
          $ref: "#/components/schemas/UnitType"
        landRegistry:
          type: string
        cadastralDistrict:
          type: string
        sheetNumber:
          type: string
        plotNumber:
          type: integer
          format: int32
          exclusiveMinimum: 0
        cadastralSection:
          type: string
        plot:
          type: string
        economyType:
          type: string
        location:
          type: string
        plotArea:
          type: integer
          format: int32
          minimum: 0
        space:
          type: number
          format: float
        description:
          type: string
        id:
          type: string
        title:
          type: string
          maxLength: 255
    PropertyListJson:
      description: A list of properties
      type: object
      properties:
        properties:
          type: array
          items:
            $ref: "#/components/schemas/RentalUnitTreeNodeJson"
    RentJson:
      description: A rent of a tenancy
      type: object
      required:
      - billingCycle
      - firstPaymentDate
      properties:
        billingCycle:
          $ref: "#/components/schemas/BillingCycle"
        firstPaymentDate:
          $ref: "#/components/schemas/LocalDate"
        lastPaymentDate:
          $ref: "#/components/schemas/LocalDate"
        basicRent:
          type: number
          format: float
          minimum: 0
        operatingCostsPrepayment:
          type: number
          format: float
          minimum: 0
        heatingCostsPrepayment:
          type: number
          format: float
          minimum: 0
    RentalUnitNodeDataJson:
      type: object
      description: Encapsulated data of a project tree node
      properties:
        id:
          type: string
        type:
          description: "Type of the node (e.g., 'PROPERTY', 'BUILDING')"
          type: string
          examples:
          - PROPERTY
          $ref: "#/components/schemas/UnitType"
        title:
          type: string
          description: Title of the node
          examples:
          - Main Building
        location:
          type: string
          description: Location of the rental unit
          examples:
          - first floor left
        description:
          type: string
          description: Description of the rental unit
          examples:
          - A multi-story office building
        tenant:
          type: string
          description: Name of the tenant associated with this node
          examples:
          - "Doe, John"
        space:
          type: number
          format: float
          description: Usable space in square meters
          examples:
          - 350.5
      required:
      - type
    RentalUnitTreeNodeJson:
      type: object
      description: A tree node representing a project entity
      required:
      - key
      properties:
        key:
          type: string
          description: Key of the node
          examples:
          - Property 1
        data:
          description: Data encapsulating node attributes
          type: object
          $ref: "#/components/schemas/RentalUnitNodeDataJson"
        children:
          type: array
          items:
            $ref: "#/components/schemas/RentalUnitTreeNodeJson"
          description: Children nodes
    SiteJson:
      description: A site as part of a property
      type: object
      properties:
        type:
          $ref: "#/components/schemas/UnitType"
        outdoorArea:
          type: number
          format: float
          minimum: 0
        space:
          type: number
          format: float
        location:
          type: string
        description:
          type: string
        id:
          type: string
        title:
          type: string
          maxLength: 255
        address:
          $ref: "#/components/schemas/AddressJson"
    Status:
      type: string
      enum:
      - PENDING
      - OPEN
      - IN_PROGRESS
      - CLOSED
      - REJECTED
    StorageJson:
      description: A storage inside a building but with living space according to
        WoFIV
      type: object
      properties:
        type:
          $ref: "#/components/schemas/UnitType"
        usableSpace:
          type: number
          format: float
          minimum: 0
        heatingSpace:
          type: number
          format: float
          minimum: 0
        space:
          type: number
          format: float
        location:
          type: string
        description:
          type: string
        id:
          type: string
        title:
          type: string
          maxLength: 255
    TaskItemJson:
      description: A task item with basic information
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        title:
          type: string
        type:
          $ref: "#/components/schemas/Type"
        status:
          $ref: "#/components/schemas/Status"
        owner:
          type: string
    TaskItemJson1:
      description: A task item with basic information from a tenant's perspective
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        title:
          type: string
        type:
          $ref: "#/components/schemas/Type"
        status:
          $ref: "#/components/schemas/Status"
    TaskJson:
      description: A task
      type: object
      properties:
        reporterId:
          type: string
        id:
          type: string
        projectId:
          type: string
        title:
          type: string
          maxLength: 255
        type:
          $ref: "#/components/schemas/Type"
        status:
          $ref: "#/components/schemas/Status"
        ownerId:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        description:
          type: string
        blockedBy:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        relatedTo:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        duplicateOf:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
    TaskJson1:
      description: A task from a tenant's perspective
      type: object
      properties:
        reporterId:
          type: string
        id:
          type: string
        title:
          type: string
          maxLength: 255
        type:
          $ref: "#/components/schemas/Type"
        status:
          $ref: "#/components/schemas/Status"
        description:
          type: string
        createdAt:
          $ref: "#/components/schemas/Date"
    TaskListJson:
      description: A list of tasks
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/TaskItemJson"
    TaskListJson1:
      description: A list of tasks from a tenant's perspective
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/TaskItemJson1"
    TenancyItemJson:
      description: A tenancy item with basic information from a tenant's perspective
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        rentalType:
          description: "Type of the node (e.g., 'PROPERTY', 'BUILDING')"
          type: string
          examples:
          - PROPERTY
          $ref: "#/components/schemas/UnitType"
        rentalTitle:
          type: string
          description: Title of the node
          examples:
          - Main Building
        active:
          type: boolean
      required:
      - rentalType
    TenancyJson:
      description: A tenancy of a rentable unit
      type: object
      properties:
        active:
          type: boolean
        id:
          type: string
        tenants:
          type: array
          items:
            $ref: "#/components/schemas/UserJson"
        startOfRental:
          $ref: "#/components/schemas/LocalDate"
        endOfRental:
          $ref: "#/components/schemas/LocalDate"
    TenancyJson1:
      description: A read-only tenancy of a rentable unit from a tenant's perspective
      type: object
      properties:
        id:
          type: string
        rentalType:
          description: "Type of the node (e.g., 'PROPERTY', 'BUILDING')"
          type: string
          examples:
          - PROPERTY
          $ref: "#/components/schemas/UnitType"
        rentalTitle:
          type: string
          description: Title of the node
          examples:
          - Main Building
        startOfRental:
          $ref: "#/components/schemas/LocalDate"
        endOfRental:
          $ref: "#/components/schemas/LocalDate"
        billingCycle:
          $ref: "#/components/schemas/BillingCycle"
        basicRent:
          type: number
          format: float
        operatingCostsPrepayment:
          type: number
          format: float
        heatingCostsPrepayment:
          type: number
          format: float
      required:
      - rentalType
    TenancyListJson:
      description: A list of tenancies from a tenant's perspective
      type: object
      properties:
        tenancies:
          type: array
          items:
            $ref: "#/components/schemas/TenancyItemJson"
    Type:
      type: string
      enum:
      - TASK
      - DEFECT
      - MAINTENANCE
    UUID:
      type: string
      format: uuid
      pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
    UnitType:
      type: string
      enum:
      - PROPERTY
      - SITE
      - BUILDING
      - APARTMENT
      - STORAGE
      - COMMERCIAL
    UserJson:
      description: User information globally
      type: object
      properties:
        active:
          type: boolean
        id:
          type: string
        userRoles:
          type: array
          uniqueItems: true
          items:
            $ref: "#/components/schemas/UserRole"
        email:
          type: string
          maxLength: 255
        firstName:
          type: string
          minLength: 3
          maxLength: 255
        lastName:
          type: string
          minLength: 3
          maxLength: 255
        address:
          $ref: "#/components/schemas/AddressJson"
        mobilePhoneNumber:
          type: string
          pattern: "^\\+[1-9]\\d{4,14}$"
        businessPhoneNumber:
          type: string
          pattern: "^\\+[1-9]\\d{4,14}$"
        privatePhoneNumber:
          type: string
          pattern: "^\\+[1-9]\\d{4,14}$"
        registeredDate:
          $ref: "#/components/schemas/LocalDate"
        lastLoginDate:
          $ref: "#/components/schemas/LocalDateTime"
    UserRole:
      type: string
      enum:
      - MANAGER
      - TENANT
      - CONTRACTOR
  securitySchemes:
    SecurityScheme:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Authentication
paths:
  /notification/test:
    get:
      parameters:
      - name: to
        in: query
        schema:
          type: string
        required: true
      responses:
        "200":
          description: OK
      summary: Send Test Emails
      tags:
      - Mailing Resource
info:
  title: remsfal-notification API
  version: 1.0.0-SNAPSHOT
servers:
- url: http://localhost:8082
  description: Auto generated value
- url: http://0.0.0.0:8082
  description: Auto generated value
