---
openapi: 3.1.0
components:
  schemas:
    AddressJson:
      description: "The address of a customer, a building or a site"
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        province:
          type: string
        zip:
          type: string
          pattern: "^\\d{4,5}$"
        countryCode:
          type: string
    AddressModel:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        province:
          type: string
        zip:
          type: string
        country:
          $ref: "#/components/schemas/Locale"
    ApartmentJson:
      description: An apartment inside a building
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          maxLength: 255
        location:
          type: string
        description:
          type: string
        livingSpace:
          type: number
          format: float
        usableSpace:
          type: number
          format: float
        heatingSpace:
          type: number
          format: float
        tenancy:
          $ref: "#/components/schemas/TenancyJson"
    BillingCycle:
      type: string
      enum:
      - WEEKLY
      - MONTHLY
    BuildingJson:
      description: A building as part of a property
      type: object
      properties:
        tenancy:
          $ref: "#/components/schemas/TenancyModel"
        id:
          type: string
        title:
          type: string
          maxLength: 255
        address:
          $ref: "#/components/schemas/AddressModel"
        description:
          type: string
        livingSpace:
          type: number
          format: float
        commercialSpace:
          type: number
          format: float
        usableSpace:
          type: number
          format: float
        heatingSpace:
          type: number
          format: float
        differentHeatingSpace:
          type: boolean
    ChatMessageJson:
      description: A single chat message
      type: object
      properties:
        messageId:
          $ref: "#/components/schemas/UUID"
        chatSessionId:
          $ref: "#/components/schemas/UUID"
        senderId:
          $ref: "#/components/schemas/UUID"
        contentType:
          type: string
        content:
          type: string
        url:
          type: string
        createdAt:
          $ref: "#/components/schemas/Instant"
    ChatMessageListJson:
      description: A list of chat messages
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/ChatMessageJson"
    ChatSessionJson:
      description: A chat session
      type: object
      properties:
        sessionId:
          $ref: "#/components/schemas/UUID"
        projectId:
          $ref: "#/components/schemas/UUID"
        taskId:
          $ref: "#/components/schemas/UUID"
        createdAt:
          $ref: "#/components/schemas/Instant"
        modifiedAt:
          $ref: "#/components/schemas/Instant"
    CommercialJson:
      description: An commercial inside a building
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          maxLength: 255
        location:
          type: string
        description:
          type: string
        commercialSpace:
          type: number
          format: float
        usableSpace:
          type: number
          format: float
        heatingSpace:
          type: number
          format: float
        tenancy:
          $ref: "#/components/schemas/TenancyJson"
    CountryItemJson:
      description: A country item of a list
      type: object
      required:
      - countryCode
      - name
      properties:
        countryCode:
          type: string
          minLength: 1
        name:
          type: string
          minLength: 1
    CountryListJson:
      description: A list of countries
      type: object
      properties:
        countries:
          type: array
          items:
            $ref: "#/components/schemas/CountryItemJson"
    CustomerModel:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        active:
          type: boolean
        name:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        address:
          $ref: "#/components/schemas/AddressModel"
        mobilePhoneNumber:
          type: string
        businessPhoneNumber:
          type: string
        privatePhoneNumber:
          type: string
        registeredDate:
          $ref: "#/components/schemas/LocalDate"
        lastLoginDate:
          $ref: "#/components/schemas/LocalDateTime"
    Date:
      type: string
      format: date
      examples:
      - 2022-03-10
    GarageJson:
      description: A garage inside a building
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          maxLength: 255
        location:
          type: string
        description:
          type: string
        usableSpace:
          type: number
          format: float
    Instant:
      type: string
      format: date-time
      examples:
      - 2022-03-10T16:15:50Z
    LocalDate:
      type: string
      format: date
      examples:
      - 2022-03-10
    LocalDateTime:
      type: string
      format: date-time
      examples:
      - 2022-03-10T12:15:50
    Locale:
      type: object
      properties:
        language:
          type: string
        script:
          type: string
        country:
          type: string
        variant:
          type: string
        extensionKeys:
          type: array
          uniqueItems: true
          items:
            type: string
            format: char
        unicodeLocaleAttributes:
          type: array
          uniqueItems: true
          items:
            type: string
        unicodeLocaleKeys:
          type: array
          uniqueItems: true
          items:
            type: string
        iSO3Language:
          type: string
        iSO3Country:
          type: string
        displayLanguage:
          type: string
        displayScript:
          type: string
        displayCountry:
          type: string
        displayVariant:
          type: string
        displayName:
          type: string
    MemberRole:
      type: string
      enum:
      - PROPRIETOR
      - MANAGER
      - LESSOR
      - STAFF
      - COLLABORATOR
    ProjectItemJson:
      description: A project item with the user's member role only
      type: object
      required:
      - id
      - name
      - memberRole
      properties:
        id:
          type: string
        name:
          type: string
        memberRole:
          $ref: "#/components/schemas/MemberRole"
    ProjectJson:
      description: A project
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          pattern: \S
          minLength: 1
          maxLength: 99
        members:
          type: array
          uniqueItems: true
          items:
            $ref: "#/components/schemas/ProjectMemberJson"
      required:
      - title
    ProjectListJson:
      description: A list of projects
      type: object
      required:
      - first
      - size
      - total
      properties:
        first:
          type: integer
          format: int32
          description: "Index of the first element in projects list of total available\
            \ entries, starting at 1"
          examples:
          - 1
        size:
          type: integer
          format: int32
          maximum: 100
          minimum: 1
          description: Number of elements in projects list
          default: 10
        total:
          type: integer
          format: int64
          description: Total number of available projects
        projects:
          type: array
          items:
            $ref: "#/components/schemas/ProjectItemJson"
    ProjectMemberJson:
      type: object
      description: Project member information in context of a project
      properties:
        privileged:
          type: boolean
        id:
          type: string
        name:
          type: string
        email:
          type: string
        active:
          type: boolean
        role:
          $ref: "#/components/schemas/MemberRole"
      required:
      - role
    ProjectMemberListJson:
      description: A list of project members
      type: object
      required:
      - members
      properties:
        members:
          type: array
          items:
            $ref: "#/components/schemas/ProjectMemberJson"
    PropertyItemJson:
      description: A project item with the user's member role only
      type: object
      required:
      - id
      - title
      - landRegisterEntry
      - description
      - plotArea
      properties:
        id:
          type: string
        title:
          type: string
        landRegisterEntry:
          type: string
        description:
          type: string
        plotArea:
          type: integer
          format: int32
    PropertyJson:
      description: A property
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          maxLength: 255
        landRegisterEntry:
          type: string
        description:
          type: string
        plotArea:
          type: integer
          format: int32
        effectiveSpace:
          type: number
          format: float
    PropertyListJson:
      description: A list of properties
      type: object
      properties:
        properties:
          type: array
          items:
            $ref: "#/components/schemas/RentalUnitTreeNodeJson"
    RentJson:
      type: object
      description: A rent of a tenancy
      required:
      - billingCycle
      - firstPaymentDate
      properties:
        billingCycle:
          $ref: "#/components/schemas/BillingCycle"
        firstPaymentDate:
          $ref: "#/components/schemas/LocalDate"
        lastPaymentDate:
          $ref: "#/components/schemas/LocalDate"
        basicRent:
          type: number
          format: float
        operatingCostsPrepayment:
          type: number
          format: float
        heatingCostsPrepayment:
          type: number
          format: float
    RentModel:
      type: object
      properties:
        billingCycle:
          $ref: "#/components/schemas/BillingCycle"
        firstPaymentDate:
          $ref: "#/components/schemas/LocalDate"
        lastPaymentDate:
          $ref: "#/components/schemas/LocalDate"
        basicRent:
          type: number
          format: float
        operatingCostsPrepayment:
          type: number
          format: float
        heatingCostsPrepayment:
          type: number
          format: float
    RentalUnitNodeDataJson:
      type: object
      description: Encapsulated data of a project tree node
      properties:
        id:
          type: string
        type:
          description: "Type of the node (e.g., 'PROPERTY', 'BUILDING')"
          type: string
          examples:
          - PROPERTY
          $ref: "#/components/schemas/UnitType"
        title:
          type: string
          description: Title of the node
          examples:
          - Main Building
        description:
          type: string
          description: Description of the node
          examples:
          - A multi-story office building
        tenant:
          type: string
          description: Name of the tenant associated with this node
          examples:
          - "Doe, John"
        usableSpace:
          type: number
          format: float
          description: Usable space in square meters
          examples:
          - 350.5
      required:
      - type
    RentalUnitTreeNodeJson:
      type: object
      description: A tree node representing a project entity
      required:
      - key
      properties:
        key:
          type: string
          description: Key of the node
          examples:
          - Property 1
        data:
          description: Data encapsulating node attributes
          type: object
          $ref: "#/components/schemas/RentalUnitNodeDataJson"
        children:
          type: array
          items:
            $ref: "#/components/schemas/RentalUnitTreeNodeJson"
          description: Children nodes
    SiteJson:
      description: A site as part of a property
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          maxLength: 255
        address:
          $ref: "#/components/schemas/AddressJson"
        description:
          type: string
        tenancy:
          $ref: "#/components/schemas/TenancyJson"
        usableSpace:
          type: number
          format: float
    Status:
      type: string
      enum:
      - PENDING
      - OPEN
      - IN_PROGRESS
      - CLOSED
      - REJECTED
    TaskItemJson:
      description: A task item with basic information
      type: object
      required:
      - id
      - name
      - title
      - status
      - owner
      properties:
        id:
          type: string
        name:
          type: string
        title:
          type: string
        status:
          $ref: "#/components/schemas/Status"
        owner:
          type: string
    TaskJson:
      description: A task
      type: object
      properties:
        type:
          $ref: "#/components/schemas/Type"
        id:
          type: string
        projectId:
          type: string
        title:
          type: string
          maxLength: 255
        status:
          $ref: "#/components/schemas/Status"
        ownerId:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        description:
          type: string
        blockedBy:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        relatedTo:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        duplicateOf:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        createdAt:
          $ref: "#/components/schemas/Date"
        modifiedAt:
          $ref: "#/components/schemas/Date"
    TaskListJson:
      description: A list of tasks
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/TaskItemJson"
    TenancyJson:
      type: object
      description: A tenancy of a rentable unit
      properties:
        id:
          type: string
        rent:
          type: array
          items:
            $ref: "#/components/schemas/RentJson"
        tenant:
          $ref: "#/components/schemas/UserJson"
        startOfRental:
          $ref: "#/components/schemas/LocalDate"
        endOfRental:
          $ref: "#/components/schemas/LocalDate"
    TenancyModel:
      type: object
      properties:
        id:
          type: string
        rent:
          type: array
          items:
            $ref: "#/components/schemas/RentModel"
        tenant:
          $ref: "#/components/schemas/CustomerModel"
        startOfRental:
          $ref: "#/components/schemas/LocalDate"
        endOfRental:
          $ref: "#/components/schemas/LocalDate"
    Type:
      type: string
      enum:
      - TASK
      - DEFECT
      - MAINTENANCE
    UUID:
      type: string
      format: uuid
      pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
    UnitType:
      type: string
      enum:
      - PROPERTY
      - SITE
      - BUILDING
      - APARTMENT
      - COMMERCIAL
      - GARAGE
    UserJson:
      description: User information globally
      type: object
      properties:
        active:
          type: boolean
        id:
          type: string
        email:
          type: string
          maxLength: 255
        firstName:
          type: string
          minLength: 3
          maxLength: 255
        lastName:
          type: string
          minLength: 3
          maxLength: 255
        address:
          $ref: "#/components/schemas/AddressJson"
        mobilePhoneNumber:
          type: string
          pattern: "^\\+[1-9]\\d{4,14}$"
        businessPhoneNumber:
          type: string
          pattern: "^\\+[1-9]\\d{4,14}$"
        privatePhoneNumber:
          type: string
          pattern: "^\\+[1-9]\\d{4,14}$"
        registeredDate:
          $ref: "#/components/schemas/LocalDate"
        lastLoginDate:
          $ref: "#/components/schemas/LocalDateTime"
  securitySchemes:
    SecurityScheme:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Authentication
paths:
  /api/v1/address:
    get:
      summary: Retrieve supported countries.
      parameters:
      - description: A zip code to map the city
        name: zip
        in: query
        schema:
          type: string
          pattern: "^\\d{4,5}$"
        required: true
      responses:
        "200":
          description: A list of suggested cities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AddressJson"
        "401":
          description: No user authentication provided via session cookie
  /api/v1/address/countries:
    get:
      summary: Retrieve supported countries.
      responses:
        "200":
          description: A list of supported countries
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountryListJson"
        "401":
          description: No user authentication provided via session cookie
  /api/v1/authentication/login:
    get:
      summary: Login user via oauth flow.
      parameters:
      - name: route
        in: query
        schema:
          type: string
          default: /
      responses:
        "302":
          description: Redirect user to the identity provider
  /api/v1/authentication/logout:
    get:
      summary: Logout user identified by the session cookie.
      responses:
        "302":
          description: Redirect user to the logout page
  /api/v1/authentication/session:
    get:
      summary: Start user session via oauth flow.
      parameters:
      - name: code
        in: query
        schema:
          type: string
      - name: error
        in: query
        schema:
          type: string
      - name: state
        in: query
        schema:
          type: string
          default: /
      responses:
        "302":
          description: Redirect user to the frontend spa
  /api/v1/projects:
    get:
      summary: Retrieve information for all projects.
      parameters:
      - description: Maximum number of projects to return
        name: limit
        in: query
        schema:
          type: integer
          format: int32
          maximum: 100
          exclusiveMinimum: 0
          default: "10"
        required: true
      - description: Offset of the first project to return
        name: offset
        in: query
        schema:
          type: integer
          format: int32
          minimum: 0
          default: "0"
        required: true
      responses:
        "401":
          description: No user authentication provided via session cookie
    post:
      summary: Create a new project.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectJson"
        required: true
      responses:
        "201":
          description: Project created successfully
          headers:
            Location:
              description: URL of the new project
        "400":
          description: Invalid request message
        "401":
          description: No user authentication provided via session cookie
  /api/v1/projects/{projectId}:
    patch:
      summary: Update information of a project.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectJson"
        required: true
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The project does not exist
    get:
      summary: Retrieve information of a project.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The project does not exist
    delete:
      summary: Delete an existing project.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "204":
          description: The project was deleted successfully
        "401":
          description: No user authentication provided via session cookie
  /api/v1/projects/{projectId}/apartments:
    post:
      summary: Create a new apartment.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApartmentJson"
        required: true
      responses:
        "201":
          description: Apartment created successfully
          headers:
            Location:
              description: URL of the new apartment
  /api/v1/projects/{projectId}/apartments/{apartmentId}:
    patch:
      summary: Update information on an apartment
      parameters:
      - description: ID of the apartment
        required: true
        name: apartmentId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApartmentJson"
        required: true
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The apartment does not exist
    get:
      summary: Retrieve information of an apartment.
      parameters:
      - description: ID of the apartment
        required: true
        name: apartmentId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "404":
          description: The apartment does not exist
        "401":
          description: No user authentication provided via session cookie
    delete:
      summary: Delete an existing apartment
      parameters:
      - description: ID of the apartment
        required: true
        name: apartmentId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "204":
          description: The building was deleted successfully
        "401":
          description: No user authentication provided via session cookie
  /api/v1/projects/{projectId}/buildings:
    post:
      summary: Create a new building.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BuildingJson"
        required: true
      responses:
        "201":
          description: Building created successfully
          headers:
            Location:
              description: URL of the new building
  /api/v1/projects/{projectId}/buildings/{buildingId}:
    patch:
      summary: Update information of a building.
      parameters:
      - description: ID of the building
        required: true
        name: buildingId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BuildingJson"
        required: true
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The building does not exist
    get:
      summary: Retrieve information of a building.
      parameters:
      - description: ID of the building
        required: true
        name: buildingId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "404":
          description: The building does not exist
    delete:
      summary: Delete an existing building.
      parameters:
      - description: ID of the building
        required: true
        name: buildingId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "204":
          description: The building was deleted successfully
        "401":
          description: No user authentication provided via session cookie
  /api/v1/projects/{projectId}/buildings/{buildingId}/apartments:
    post:
      summary: Create a new apartment.
      parameters:
      - description: ID of the building
        required: true
        name: buildingId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApartmentJson"
        required: true
      responses:
        "201":
          description: Apartment created successfully
          headers:
            Location:
              description: URL of the new apartment
  /api/v1/projects/{projectId}/buildings/{buildingId}/apartments/{apartmentId}:
    patch:
      summary: Update information on an apartment
      parameters:
      - description: ID of the apartment
        required: true
        name: apartmentId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApartmentJson"
        required: true
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The apartment does not exist
    get:
      summary: Retrieve information of an apartment.
      parameters:
      - description: ID of the apartment
        required: true
        name: apartmentId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "404":
          description: The apartment does not exist
        "401":
          description: No user authentication provided via session cookie
    delete:
      summary: Delete an existing apartment
      parameters:
      - description: ID of the apartment
        required: true
        name: apartmentId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "204":
          description: The building was deleted successfully
        "401":
          description: No user authentication provided via session cookie
  /api/v1/projects/{projectId}/buildings/{buildingId}/commercials:
    post:
      summary: Create a new commercial unit.
      parameters:
      - description: ID of the building
        required: true
        name: buildingId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommercialJson"
        required: true
      responses:
        "201":
          description: Commercial unit created successfully
          headers:
            Location:
              description: URL of the new commercial
  /api/v1/projects/{projectId}/buildings/{buildingId}/commercials/{commercialId}:
    patch:
      summary: Update information of a commercial unit
      parameters:
      - description: ID of the commercial unit
        required: true
        name: commercialId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommercialJson"
        required: true
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The commercial unit does not exist
    get:
      summary: Retrieve information about a commercial unit.
      parameters:
      - description: ID of the commercial unit
        required: true
        name: commercialId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "404":
          description: The commercial unit does not exist
        "401":
          description: No user authentication provided via session cookie
    delete:
      summary: Delete an existing commercial unit
      parameters:
      - description: ID of the commercial unit
        required: true
        name: commercialId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "204":
          description: The commercial unit was deleted successfully
        "401":
          description: No user authentication provided via session cookie
  /api/v1/projects/{projectId}/buildings/{buildingId}/garages:
    post:
      summary: Create a new garage.
      parameters:
      - description: ID of the building
        required: true
        name: buildingId
        in: path
        schema:
          type: string
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GarageJson"
        required: true
      responses:
        "201":
          description: Garage created successfully
          headers:
            Location:
              description: URL of the new garage
  /api/v1/projects/{projectId}/buildings/{buildingId}/garages/{garageId}:
    patch:
      summary: Update information of a garage.
      parameters:
      - description: ID of the garage
        required: true
        name: garageId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GarageJson"
        required: true
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The garage does not exist
    get:
      summary: Retrieve information of a garage.
      parameters:
      - description: ID of the garage
        required: true
        name: garageId
        in: path
        schema:
          type: string
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
      responses:
        "404":
          description: The garage does not exist
    delete:
      summary: Delete an existing garage.
      parameters:
      - description: ID of the garage
        required: true
        name: garageId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "204":
          description: The garage was deleted successfully
        "401":
          description: No user authentication provided via session cookie
  /api/v1/projects/{projectId}/commercials:
    post:
      summary: Create a new commercial unit.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommercialJson"
        required: true
      responses:
        "201":
          description: Commercial unit created successfully
          headers:
            Location:
              description: URL of the new commercial
  /api/v1/projects/{projectId}/commercials/{commercialId}:
    patch:
      summary: Update information of a commercial unit
      parameters:
      - description: ID of the commercial unit
        required: true
        name: commercialId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommercialJson"
        required: true
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The commercial unit does not exist
    get:
      summary: Retrieve information about a commercial unit.
      parameters:
      - description: ID of the commercial unit
        required: true
        name: commercialId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "404":
          description: The commercial unit does not exist
        "401":
          description: No user authentication provided via session cookie
    delete:
      summary: Delete an existing commercial unit
      parameters:
      - description: ID of the commercial unit
        required: true
        name: commercialId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "204":
          description: The commercial unit was deleted successfully
        "401":
          description: No user authentication provided via session cookie
  /api/v1/projects/{projectId}/garages:
    post:
      summary: Create a new garage.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GarageJson"
        required: true
      responses:
        "201":
          description: Garage created successfully
          headers:
            Location:
              description: URL of the new garage
  /api/v1/projects/{projectId}/garages/{garageId}:
    patch:
      summary: Update information of a garage.
      parameters:
      - description: ID of the garage
        required: true
        name: garageId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GarageJson"
        required: true
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The garage does not exist
    get:
      summary: Retrieve information of a garage.
      parameters:
      - description: ID of the garage
        required: true
        name: garageId
        in: path
        schema:
          type: string
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
      responses:
        "404":
          description: The garage does not exist
    delete:
      summary: Delete an existing garage.
      parameters:
      - description: ID of the garage
        required: true
        name: garageId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "204":
          description: The garage was deleted successfully
        "401":
          description: No user authentication provided via session cookie
  /api/v1/projects/{projectId}/members:
    get:
      summary: Retrieve information of all project members.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The project does not exist
    post:
      summary: Add a member to project.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectMemberJson"
        required: true
      responses:
        "200":
          description: Member added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectMemberJson"
        "400":
          description: Invalid request message
        "401":
          description: No user authentication provided via session cookie
  /api/v1/projects/{projectId}/members/{memberId}:
    patch:
      summary: Update role of a project member.
      parameters:
      - description: ID of the member
        required: true
        name: memberId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectMemberJson"
        required: true
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The project or the member does not exist
    delete:
      summary: Delete an existing project member.
      parameters:
      - description: ID of the member
        required: true
        name: memberId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "204":
          description: The project member was deleted successfully
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The project or the member does not exist
  /api/v1/projects/{projectId}/properties:
    get:
      summary: Retrieve information for all properties.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "401":
          description: No user authentication provided via session cookie
    post:
      summary: Create a new property.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertyJson"
        required: true
      responses:
        "201":
          description: Property created successfully
          headers:
            Location:
              description: URL of the new property
  /api/v1/projects/{projectId}/properties/{propertyId}:
    patch:
      summary: Update information of a property.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the property
        required: true
        name: propertyId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertyJson"
        required: true
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The property does not exist
    get:
      summary: Retrieve information of a property.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the property
        required: true
        name: propertyId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "404":
          description: The property does not exist
    delete:
      summary: Delete an existing property.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the property
        required: true
        name: propertyId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "204":
          description: The property was deleted successfully
        "401":
          description: No user authentication provided via session cookie
  /api/v1/projects/{projectId}/properties/{propertyId}/buildings:
    post:
      summary: Create a new building.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the property
        required: true
        name: propertyId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BuildingJson"
        required: true
      responses:
        "201":
          description: Building created successfully
          headers:
            Location:
              description: URL of the new building
  /api/v1/projects/{projectId}/properties/{propertyId}/buildings/{buildingId}:
    patch:
      summary: Update information of a building.
      parameters:
      - description: ID of the building
        required: true
        name: buildingId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BuildingJson"
        required: true
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The building does not exist
    get:
      summary: Retrieve information of a building.
      parameters:
      - description: ID of the building
        required: true
        name: buildingId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "404":
          description: The building does not exist
    delete:
      summary: Delete an existing building.
      parameters:
      - description: ID of the building
        required: true
        name: buildingId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "204":
          description: The building was deleted successfully
        "401":
          description: No user authentication provided via session cookie
  /api/v1/projects/{projectId}/properties/{propertyId}/buildings/{buildingId}/apartments:
    post:
      summary: Create a new apartment.
      parameters:
      - description: ID of the building
        required: true
        name: buildingId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApartmentJson"
        required: true
      responses:
        "201":
          description: Apartment created successfully
          headers:
            Location:
              description: URL of the new apartment
  /api/v1/projects/{projectId}/properties/{propertyId}/buildings/{buildingId}/apartments/{apartmentId}:
    patch:
      summary: Update information on an apartment
      parameters:
      - description: ID of the apartment
        required: true
        name: apartmentId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApartmentJson"
        required: true
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The apartment does not exist
    get:
      summary: Retrieve information of an apartment.
      parameters:
      - description: ID of the apartment
        required: true
        name: apartmentId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "404":
          description: The apartment does not exist
        "401":
          description: No user authentication provided via session cookie
    delete:
      summary: Delete an existing apartment
      parameters:
      - description: ID of the apartment
        required: true
        name: apartmentId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "204":
          description: The building was deleted successfully
        "401":
          description: No user authentication provided via session cookie
  /api/v1/projects/{projectId}/properties/{propertyId}/buildings/{buildingId}/commercials:
    post:
      summary: Create a new commercial unit.
      parameters:
      - description: ID of the building
        required: true
        name: buildingId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommercialJson"
        required: true
      responses:
        "201":
          description: Commercial unit created successfully
          headers:
            Location:
              description: URL of the new commercial
  /api/v1/projects/{projectId}/properties/{propertyId}/buildings/{buildingId}/commercials/{commercialId}:
    patch:
      summary: Update information of a commercial unit
      parameters:
      - description: ID of the commercial unit
        required: true
        name: commercialId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommercialJson"
        required: true
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The commercial unit does not exist
    get:
      summary: Retrieve information about a commercial unit.
      parameters:
      - description: ID of the commercial unit
        required: true
        name: commercialId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "404":
          description: The commercial unit does not exist
        "401":
          description: No user authentication provided via session cookie
    delete:
      summary: Delete an existing commercial unit
      parameters:
      - description: ID of the commercial unit
        required: true
        name: commercialId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "204":
          description: The commercial unit was deleted successfully
        "401":
          description: No user authentication provided via session cookie
  /api/v1/projects/{projectId}/properties/{propertyId}/buildings/{buildingId}/garages:
    post:
      summary: Create a new garage.
      parameters:
      - description: ID of the building
        required: true
        name: buildingId
        in: path
        schema:
          type: string
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GarageJson"
        required: true
      responses:
        "201":
          description: Garage created successfully
          headers:
            Location:
              description: URL of the new garage
  /api/v1/projects/{projectId}/properties/{propertyId}/buildings/{buildingId}/garages/{garageId}:
    patch:
      summary: Update information of a garage.
      parameters:
      - description: ID of the garage
        required: true
        name: garageId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GarageJson"
        required: true
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The garage does not exist
    get:
      summary: Retrieve information of a garage.
      parameters:
      - description: ID of the garage
        required: true
        name: garageId
        in: path
        schema:
          type: string
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
      responses:
        "404":
          description: The garage does not exist
    delete:
      summary: Delete an existing garage.
      parameters:
      - description: ID of the garage
        required: true
        name: garageId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "204":
          description: The garage was deleted successfully
        "401":
          description: No user authentication provided via session cookie
  /api/v1/projects/{projectId}/properties/{propertyId}/sites:
    post:
      summary: Create a new site.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the property
        required: true
        name: propertyId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteJson"
        required: true
      responses:
        "201":
          description: Site created successfully
          headers:
            Location:
              description: URL of the new site
  /api/v1/projects/{projectId}/properties/{propertyId}/sites/{siteId}:
    patch:
      summary: Update information of a site.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the site
        required: true
        name: siteId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteJson"
        required: true
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The site does not exist
    get:
      summary: Retrieve information of a site.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the site
        required: true
        name: siteId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "404":
          description: The site does not exist
    delete:
      summary: Delete an existing site.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the site
        required: true
        name: siteId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "204":
          description: The site was deleted successfully
        "401":
          description: No user authentication provided via session cookie
  /api/v1/projects/{projectId}/sites:
    post:
      summary: Create a new site.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteJson"
        required: true
      responses:
        "201":
          description: Site created successfully
          headers:
            Location:
              description: URL of the new site
  /api/v1/projects/{projectId}/sites/{siteId}:
    patch:
      summary: Update information of a site.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the site
        required: true
        name: siteId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteJson"
        required: true
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The site does not exist
    get:
      summary: Retrieve information of a site.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the site
        required: true
        name: siteId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "404":
          description: The site does not exist
    delete:
      summary: Delete an existing site.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the site
        required: true
        name: siteId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "204":
          description: The site was deleted successfully
        "401":
          description: No user authentication provided via session cookie
  /api/v1/projects/{projectId}/tasks:
    get:
      summary: Retrieve information for all tasks.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: Filter to return only tasks of a specific user
        name: owner
        in: query
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: Filter to return only tasks with a specific status
        name: status
        in: query
        schema:
          $ref: "#/components/schemas/Status"
      responses:
        "401":
          description: No user authentication provided via session cookie
    post:
      summary: Create a new task.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskJson"
        required: true
      responses:
        "201":
          description: Task created successfully
          headers:
            Location:
              description: URL of the new task
        "401":
          description: No user authentication provided via session cookie
  /api/v1/projects/{projectId}/tasks/{taskId}:
    patch:
      summary: Update information of a task.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the task
        required: true
        name: taskId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskJson"
        required: true
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The task does not exist
    get:
      summary: Retrieve information of a task.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the task
        required: true
        name: taskId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The property does not exist
    delete:
      summary: Delete an existing task.
      parameters:
      - description: ID of the project
        required: true
        name: projectId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      - description: ID of the task
        required: true
        name: taskId
        in: path
        schema:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      responses:
        "204":
          description: The task was deleted successfully
        "401":
          description: No user authentication provided via session cookie
  /api/v1/user:
    patch:
      summary: Update information of this user identified by the cookie.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserJson"
        required: true
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The user does not exist
    get:
      summary: Retrieve information of this user identified by the cookie.
      responses:
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The user does not exist
    delete:
      summary: Delete this user identified by the cookie.
      responses:
        "204":
          description: The user was deleted successfully
        "401":
          description: No user authentication provided via session cookie
        "404":
          description: The user does not exist
  /zeebe/start:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: {}
        required: true
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Start Workflow
      tags:
      - Zeebe Controller
info:
  title: remsfal-platform API
  version: 1.0.0-SNAPSHOT
servers:
- url: http://localhost:8080
  description: Auto generated value
- url: http://0.0.0.0:8080
  description: Auto generated value
